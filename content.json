{"meta":{"title":"一心向阳","subtitle":"心之所向，必有奇迹","description":null,"author":"len","url":"https://jiajunlen.github.io","root":"/"},"pages":[{"title":"关于","date":"2024-03-08T10:00:00.000Z","updated":"2024-03-08T13:54:02.328Z","comments":false,"path":"about/index.html","permalink":"https://jiajunlen.github.io/about/index.html","excerpt":"","text":"关于我我是一个在命运长河里挣扎的小鱼，90后，目前是小白一枚。虽然心中不甘，但是目前确实是 Worst One 。目标是成为全栈工程师、系统架构师。虽然前路迷茫，但是我会一步一步往前走。"},{"title":"错误页面","date":"2019-12-31T16:00:00.000Z","updated":"2024-03-08T12:59:49.208Z","comments":false,"path":"/404.html","permalink":"https://jiajunlen.github.io/404.html","excerpt":"","text":""},{"title":"分类","date":"2024-03-08T10:00:00.000Z","updated":"2024-03-09T08:40:44.472Z","comments":true,"path":"category/index.html","permalink":"https://jiajunlen.github.io/category/index.html","excerpt":"","text":""},{"title":"留言板","date":"2024-03-08T10:00:00.000Z","updated":"2024-03-08T13:52:08.887Z","comments":true,"path":"comment/index.html","permalink":"https://jiajunlen.github.io/comment/index.html","excerpt":"","text":""},{"title":"赞赏","date":"2024-03-08T10:00:00.000Z","updated":"2024-03-08T13:55:48.190Z","comments":false,"path":"donate/index.html","permalink":"https://jiajunlen.github.io/donate/index.html","excerpt":"","text":"如果喜欢我的博客，或者喜欢我的博客主题，可以考虑赞赏一下哦，非常感激！网站所需的服务器和 CDN 都是不小的开支，日常维护也需要大量精力。 你们的支持是我前进的最大动力！"},{"title":"友情链接","date":"2024-03-08T10:00:00.000Z","updated":"2024-03-08T14:00:08.039Z","comments":false,"path":"friend/index.html","permalink":"https://jiajunlen.github.io/friend/index.html","excerpt":"","text":"欢迎各位朋友前来交换友链，本站友链接受以下类型的网站： 个人博客 公益组织等非盈利性网站 不接受广告、商业性网站，特殊情况除外 如果你的网站 一个月以上无法正常访问 将会被移除。"},{"title":"标签","date":"2024-03-08T10:00:00.000Z","updated":"2024-03-08T13:52:29.202Z","comments":true,"path":"tag/index.html","permalink":"https://jiajunlen.github.io/tag/index.html","excerpt":"","text":""}],"posts":[{"title":"类","slug":"class-base-learn","date":"2024-03-11T10:49:00.000Z","updated":"2024-03-11T13:04:34.554Z","comments":true,"path":"post/classbase/","permalink":"https://jiajunlen.github.io/post/classbase/","excerpt":"","text":"关于类（对象）的一些记录~~~ 类C语言是面向过程编程，而C++在C语言的基础上增加了OOP（面向对象编程），并且具备三大特性： 封装继承多态 类包含两部分内容：属性（名词）、方法（行为动作） 在类体中直接定义函数时，不需要在函数名前面加上类名，因为函数属于哪一个类是不言而喻的。但当成员函数定义在类外时，就必须在函数名前面加上类名予以限定。::被称为域解析符（也称作用域运算符或作用域限定符），用来连接类名和函数名，指明当前函数属于哪个类。成员函数必须先在类体中作原型声明，然后在类外定义，也就是说类体的位置应在函数定义之前。 1、类和对象类定义是以关键字 class 开头,后跟类的名称;类的主体是包含在一对花括号中;类定义后必须跟着一个分号或一个声明列表.我们将一类事物的共同特性抽取出来，进行类的组合: 12345678910111213141516171819class Animal&#123;private: string sex; int age;public: Animal()&#123; cout&lt;&lt;”这是构造”&lt;&lt;endl; &#125; ~Animal()&#123; cout&lt;&lt;”这是析构”&lt;&lt;endl; &#125; void speak() &#123; cout &lt;&lt; &quot;动物说话技能&quot; &lt;&lt; endl; &#125;&#125;;// 创建对象Animal animal1; 类是创建对象的模板，一个类可以创建多个对象，每个对象都是类类型的一个变量；创建对象的过程也叫类的实例化。与结构体一样，类只是一种复杂数据类型的声明，不占用内存空间。而对象是类这种数据类型的一个变量，或者说是通过类这种数据类型创建出来的一份实实在在的数据，所以占用内存空间。关于构造和析构：目前可以知道的就是：构造可以用来初始化变量，析构可以用来释放指针变量。 1.1 创建对象关于创建对象，数组和指针都可以；new 在堆上创建出来的对象是匿名的，没法直接使用，必须要用一个指针指向它，再借助指针来访问它的成员变量或成员函数。 一般有两种创建对象的方式：（1）在栈上创建，形式和定义普通变量类似；（2）在堆上使用 new关键字创建，必须要用一个指针指向它，读者要记得 delete 掉不再使用的对象。 1.2 访问（1）访问类成员创建对象以后，可以使用点号（.）来访问成员变量和成员函数，这和通过结构体变量来访问它的成员类似。如果是指针变量，那么就需要使用箭头（-&gt;）来访问。类似于下面的方式： 12345//创建对象Animal aml;aml.age = 15;aml.sex = &quot;boy&quot;;aml.speak(); （2）访问权限public： 公共的，那么是公共的就意味这不管是类内还是类外都是可以访问的。protected： 受保护的，既然是被保护的对于类外来说也是不可以访问的。private： 私有的，这个自然听得出来类外肯定是不可以访问的，只有类内是可以访问的。 protected和private这两个在继承的时候这两个是有区别的(后面提)。 1.3 构造函数名字和类名相同，没有返回值，不需要用户显式调用（用户也不能调用），而是在创建对象时自动执行。 一个类必须有构造函数，要么用户自己定义，要么编译器自动生成。一旦用户自己定义了构造函数，不管有几个，也不管形参如何，编译器都不再自动生成。而自动生成的构造函数，这个构造函数的函数体是空的，也没有形参，也不执行任何操作。 但是有一个要特别记住，就是初始化const变量的时候，初始化 const 成员变量的唯一方法就是使用初始化列表。 1.4 析构函数注意：析构函数没有参数，不能被重载，因此一个类只能有一个析构函数。如果用户没有定义，编译器会自动生成一个默认的析构函数。 12345析构函数执行的时机在所有函数之外创建的对象是全局对象，它和全局变量类似，位于内存分区中的全局数据区，程序在结束执行时会调用这些对象的析构函数。在函数内部创建的对象是局部对象，它和局部变量类似，位于栈区，函数执行结束时会调用这些对象的析构函数。new 创建的对象位于堆区，通过 delete 删除时才会调用析构函数；如果没有 delete，析构函数就不会被执行。 1.5 this指针this 是 C++ 中的一个关键字，也是一个 const 指针，它指向当前对象，通过它可以访问当前对象的所有成员。 this 实际上是成员函数的一个形参，在调用成员函数时将对象的地址作为实参传递给 this。它是成员函数和成员变量关联的桥梁。 1.6 静态变量在C++中，我们可以使用静态成员变量来实现多个对象共享数据的目标。静态成员变量是一种特殊的成员变量，它被关键字static修饰static 成员变量既可以通过对象来访问，也可以通过类来访问。 1234注意1：static 成员变量的内存既不是在声明类时分配，也不是在创建对象时分配，而是在（类外）初始化时分配。反过来说，没有在类外初始化的static 成员变量不能使用。注意2：static 成员变量不占用对象的内存，而是在所有对象之外开辟内存，即使不创建对象也可以访问，只要你在类外有进行初始化。具体来说，static 成员变量和普通的 static 变量类似，都在内存分区中的全局数据区分配内存。 使用静态变量注意下面几点： ①一个类中可以有一个或多个静态成员变量，所有的对象都共享这些静态成员变量，都可以引用它。②static 成员变量和普通 static 变量一样，都在内存分区中的全局数据区分配内存，到程序结束时才释放。这就意味着，static 成员变量不随对象的创建而分配内存，也不随对象的销毁而释放内存。而普通成员变量在对象创建时分配内存，在对象销毁时释放内存。③静态成员变量必须初始化，而且只能在类体外进行。④静态成员变量既可以通过对象名访问，也可以通过类名访问，但要遵循 private、protected 和 public 关键字的访问权限限制。当通过对象名访问时，对于不同的对象，访问的是同一份内存。 1.7 静态函数普通成员函数可以访问所有成员（包括成员变量和成员函数），静态成员函数只能访问静态成员。 编译器在编译一个普通成员函数时，会隐式地增加一个形参 this，并把当前对象的地址赋值给 this，所以普通成员函数只能在创建对象后通过对象来调用，因为它需要当前对象的地址。而静态成员函数可以通过类来直接调用，编译器不会为它增加形参 this，它不需要当前对象的地址，所以不管有没有创建对象，都可以调用静态成员函数。 普通成员变量占用对象的内存，静态成员函数没有 this 指针，不知道指向哪个对象，无法访问对象的成员变量，也就是说静态成员函数不能访问普通成员变量，只能访问静态成员变量。 1.8 const成员函数const 成员函数可以使用类中的所有成员变量，但是不能修改它们的值，这种措施主要还是为了保护数据而设置的。const 成员函数也称为常成员函数。我们通常将 get 函数设置为常成员函数。读取成员变量的函数的名字通常以get开头，后跟成员变量的名字，所以通常将它们称为 get 函数。常成员函数需要在声明和定义的时候在函数头部的结尾加上 const 关键字。 1234567最后强调一下，const位置不同，那么对应的含义也不同：函数开头的 const 用来修饰函数的返回值，表示返回值是 const 类型，也就是不能被修改例如const char * getname()。函数头部的结尾加上 const 表示常成员函数，这种函数只能读取成员变量的值，而不能修改成员变量的值例如char * getname() const。 3、继承4、多态与虚函数","categories":[{"name":"C/C++","slug":"C-C","permalink":"https://jiajunlen.github.io/category/C-C/"}],"tags":[{"name":"C/C++;类","slug":"C-C-类","permalink":"https://jiajunlen.github.io/tag/C-C-%E7%B1%BB/"}]},{"title":"C/C++基础","slug":"cpp-base-learn","date":"2024-03-11T02:19:50.000Z","updated":"2024-03-11T12:06:42.046Z","comments":true,"path":"post/cppbase/","permalink":"https://jiajunlen.github.io/post/cppbase/","excerpt":"","text":"C&#x2F;C++基本知识的学习 1、C++语法1、基础知识1.1 标准输入、输出12345678910#include &lt;stdio.h&gt; //标准输入输出流头文件using namespace std; //展开标准库命名空间stdint main()&#123; // 标准输入 cin &gt;&gt; &quot;a&quot;; // 标准输出 cout &lt;&lt; &quot;字符串内容&quot; &lt;&lt; 变量、表达式 &lt;&lt; endl; return 0;&#125; 1.2 注释（1）单行注释 //（2）多行注释 /**/ 1.3 变量定义：数据类型 变量名 &#x3D; 初值 1.4 常量（1）#define ~宏常量（2）const ~const常量不能修改，报错 1.5 关键字不能作为变量名 2、数据类型2.1 整型 数据类型 占用空间 取值范围 short 2字节 -2^15~2^15-1 int 4字节 -2^31~2^31-1 long win 4字节;Linux 4(32位)、8(64位) -2^31~2^31-1 long long 8字节 -2^63~2^63-1 2.2 sizeof()sizeof(变量&#x2F;数据类型)，返回字节数 2.3 浮点型 数据类型 占用空间 取值范围 float 4字节 -2^128~2^128(实际精度6-7位) double 8字节 -2^1024~2^1024(实际精度15-16位) 无论哪种打印时都只显示6位有效数字 2.4 字符型占用1字节空间，并不是把字符本身放入内存存储，而是将对应ASCII码放入存储单元(int)字符 --&gt; 可以打印对应ASCII值注意：（1）创建时单引号（2）单引号内只能一个字符 2.5 转移字符常见如下：（1）\\n 换行（2）\\\\ 转义输出一个\\（3）\\t 水平制表符 2.6 字符串（1）C风格：char 变量名[] = &quot;字符串值&quot;; // 中括号、双引号（2）C++风格：string 变量名 = &quot;字符串值&quot;; //需要字符串头文件 2.7 bool只占1字节空间， true | false 本质 1 | 0 3、运算符3.1 算术运算符123456int a = 1, b = 2; c;c = a + b; //加c = b - a; //减c = a * b; //乘c = a / d; //除以c = a % d; //取余 3.2 赋值运算符123456int a = 1;a = 2; //赋值c += 2; c -= 1; c *= 3; c /= 4; 3.3 比较运算符大于、小于、等于、不等于、大于等于、小于等于等等；结果只有两个： 0 或 1 3.4 逻辑表达式与(&amp;&amp;)、或(||)、非(!) 3.5 三目运算符语法： 表达式1 ？ 表达式2 ：表达式3；可左值也可右值 4、语句4.1 if123if(条件1)&#123;执行语句&#125;else if(条件2)&#123;执行语句&#125;else&#123;以上都不满足，执行此语句&#125; 4.2 for语法： for(起始表达式;条件表达式;末尾循环体)&#123;循环体&#125; 4.3 while（1）while (循环条件)&#123;循环体&#125;（2）do &#123;循环体&#125; while (循环条件) 4.4 switch1234567switch(表达式) //表达式：整型、字符型等&#123; case 1: 执行语句1;break; case 2: 执行语句2;break; ...... default: 执行语句;break;&#125; 5、数组12345678//定义数据类型 数组名[数组长度];数据类型 数组名[] = &#123;值1,值2,...&#125;;数据类型 数组名[数组长度] = &#123;值1,值2,...&#125;;//计算每个元素占用大小sizeof(数组名[0]);//计算元素个数sizeof(数组名)/sizeof(数组名[0]); 6、指针作用：间接访问内存（1）内存编号从0开始，十六进制表示；（2）指针变量存放的是一个地址 32位：4字节64位：8字节 6.1 空指针用于给指针变量初始化，不可访问：NULL为0，而0~255之间的内存编号是系统占用 6.2 野指针指向非法内存空间 12int *p = (int *)0x1100; //十六进制数强转为地址cout &lt;&lt; *p &lt;&lt; endl; //访问野指针报错 7、函数12345678//声明返回值类型 函数名 (参数列表);//定义返回值类型 函数名 (参数列表)&#123; 函数语句; return 返回值;&#125; 8、结构体1234struct 结构体名 &#123;成员列表&#125;;//创建变量struct 结构体名 变量名;struct 结构体名 变量名 = &#123;成员1初值,成员2初值,...&#125;;","categories":[{"name":"C/C++","slug":"C-C","permalink":"https://jiajunlen.github.io/category/C-C/"}],"tags":[{"name":"C/C++;","slug":"C-C","permalink":"https://jiajunlen.github.io/tag/C-C/"}]},{"title":"聊天项目","slug":"chat-demo-learn","date":"2024-03-10T08:45:02.000Z","updated":"2024-03-11T10:52:27.298Z","comments":true,"path":"post/projectChat/","permalink":"https://jiajunlen.github.io/post/projectChat/","excerpt":"","text":"简介跟着教程学习，基于编程语言C++于Qt的IDE进行界面开发、asio异步服务器设计、beast网络库搭建http网关、nodejs搭建验证服务、各服务间grpc通信、service和client使用asio通信、用户信息录入等，实现跨平台设计。 架构","categories":[{"name":"项目学习","slug":"项目学习","permalink":"https://jiajunlen.github.io/category/%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"C/C++;Qt;http;nodejs;windows;asio","slug":"C-C-Qt-http-nodejs-windows-asio","permalink":"https://jiajunlen.github.io/tag/C-C-Qt-http-nodejs-windows-asio/"}]},{"title":"学习规划","slug":"hello-world","date":"2024-03-08T10:00:00.000Z","updated":"2024-03-11T02:22:07.726Z","comments":true,"path":"post/learn/","permalink":"https://jiajunlen.github.io/post/learn/","excerpt":"","text":"这里是学习的一些记录随笔，做项目时顺便巩固知识！在此处做个记录~~~ 1、C++语法1、基础知识1、数据类型基本数据类型构造类型指针引用变量 2、运算符3、流程结构4、函数申明、定义函数类型函数指针函数重载递归 5、文件操作6、内存管理2、类封装、继承、多态 1、类和对象2、类实例3、继承4、多态与虚函数3、模版1、函数模版2、类模版3、继承的模版4、多态的模版4、STL5、新特性11&#x2F;14&#x2F;176、对象模型2、QT基础、控件、对话框QT进阶其他：QML、Qt Quick、OPenCV设计模式调试和测试：单步调试、QTestLib框架、日志（设计、实现、测试）项目 （涵盖以上知识、加密播放器、网络天气预报、海康威视萤石云）面试 （基础、项目）","categories":[{"name":"规划","slug":"规划","permalink":"https://jiajunlen.github.io/category/%E8%A7%84%E5%88%92/"}],"tags":[]}],"categories":[{"name":"C/C++","slug":"C-C","permalink":"https://jiajunlen.github.io/category/C-C/"},{"name":"项目学习","slug":"项目学习","permalink":"https://jiajunlen.github.io/category/%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"},{"name":"规划","slug":"规划","permalink":"https://jiajunlen.github.io/category/%E8%A7%84%E5%88%92/"}],"tags":[{"name":"C/C++;类","slug":"C-C-类","permalink":"https://jiajunlen.github.io/tag/C-C-%E7%B1%BB/"},{"name":"C/C++;","slug":"C-C","permalink":"https://jiajunlen.github.io/tag/C-C/"},{"name":"C/C++;Qt;http;nodejs;windows;asio","slug":"C-C-Qt-http-nodejs-windows-asio","permalink":"https://jiajunlen.github.io/tag/C-C-Qt-http-nodejs-windows-asio/"}]}